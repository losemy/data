server.port=8090
### 1000 条数据 6.4kb ==> 148kb， 带宽不足的情况下强烈建立开启
server.compression.enabled=true

### canal配置
canal.server=192.168.0.110:11111
canal.destination=example
canal.batch-size=100
canal.timeout=5
canal.mode=simple

## 配置中心
nacos.config.server-addr=192.168.0.110:8848


### jpa 用到自动化 需要了解自动化流程
spring.jpa.show-sql=false
## 大数据量下的问题 ，相当于同一次请求 共用session，也就意味着，一次请求内所有sql相关数据不会被释放
spring.jpa.open-in-view=false
spring.jpa.generate-ddl=false
### 正常需要validate就好了，项目初始化可以使用 update或者add
spring.jpa.hibernate.ddl-auto=validate
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQL57InnoDBDialect

#spring.main.allow-bean-definition-overriding=true

### redis
spring.redis.timeout = 6000ms
spring.redis.password = lose
spring.redis.host=192.168.0.110
spring.redis.port=6379
spring.redis.lettuce.pool.max-active = 1000
spring.redis.lettuce.pool.max-idle = 10
spring.redis.lettuce.pool.min-idle = 5
spring.redis.lettuce.pool.max-wait = -1

## rocket-mq
rocketmq.nameServer = 192.168.0.110:9876
rocketmq.producer.group = my-group1
rocketmq.producer.sendMessageTimeout = 300000
demo.rocketmq.orderDelTopic = del-order
demo.rocketmq.orderUpdTopic = upd-order
demo.rocketmq.orderAddTopic = add-order
demo.rocketmq.orderRetryDelTopic = retry-del-order
demo.rocketmq.orderRetryUpdTopic = retry-upd-order


